import logging
import os
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
BOT_TOKEN = os.environ.get('8452776500:AAH29GOiUiKTLjK31KyB8c_NUilHlem3jNU')
ADMIN_CHAT_ID = os.environ.get('ADMIN_CHAT_ID')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not BOT_TOKEN or not ADMIN_CHAT_ID:
    raise ValueError("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã BOT_TOKEN –∏–ª–∏ ADMIN_CHAT_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
/chat_id
# –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ADMIN_CHAT_ID –≤ int
try:
    ADMIN_CHAT_ID = int(ADMIN_CHAT_ID)
except ValueError:
    raise ValueError("ADMIN_CHAT_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
TYPING_FEEDBACK, TYPING_SUGGESTION = range(2)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def main_menu_keyboard():
    keyboard = [
        [KeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ ‚úçÔ∏è"), KeyboardButton("–ü–æ–∂–µ–ª–∞–Ω–∏–µ/–ò–¥–µ—è üí°")],
        [KeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ñ–æ—Ç–æ üì∏"), KeyboardButton("–ù–æ–≤–∏–Ω–∫–∏ üÜï")],
        [KeyboardButton("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å üìû")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# --- –ö–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –∫–æ—Ñ–µ–π–Ω—é!\n"
        "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? –í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é –Ω–∏–∂–µ:"
    )
    await update.message.reply_text(welcome_text, reply_markup=main_menu_keyboard())
    return ConversationHandler.END

async def show_news(update: Update, context: ContextTypes.DEFAULT_TYPE):
    news_text = (
        "‚òïÔ∏è <b>–ù–∞—à–∏ –Ω–æ–≤–∏–Ω–∫–∏:</b>\n\n"
        "‚Ä¢ <b>–ö–ª–µ–Ω–æ–≤—ã–π –†–∞—Ñ</b> - –Ω–µ–∂–Ω—ã–π –∏ —Å–ª–∞–¥–∫–∏–π!\n"
        "‚Ä¢ <b>–°–∏—Ä–æ–ø '–°–æ–ª–µ–Ω–∞—è –∫–∞—Ä–∞–º–µ–ª—å'</b> - —Ç–µ–ø–µ—Ä—å –≤ –≤–∞—à–µ–º –∫–æ—Ñ–µ!\n"
        "‚Ä¢ <b>–í–µ–≥–∞–Ω—Å–∫–æ–µ –º–∏–Ω–¥–∞–ª—å–Ω–æ–µ –ø–µ—á–µ–Ω—å–µ</b> - –Ω–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!\n\n"
        "–°–ª–µ–¥–∏ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏! üòâ"
    )
    await update.message.reply_text(news_text, parse_mode='HTML')

async def show_contacts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact_text = (
        "<b>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:</b>\n\n"
        "–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –∑–∞–∫–∞–∑–æ–º –∏–ª–∏ —Å—Ä–æ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å:\n\n"
        "üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> +7 (XXX) XXX-XX-XX\n"
        "‚úâÔ∏è <b>–ü–æ—á—Ç–∞:</b> coffee@mycoffee.ru\n"
        "üè† <b>–ê–¥—Ä–µ—Å:</b> —É–ª. –ö–æ—Ñ–µ–π–Ω–∞—è, –¥. 1"
    )
    await update.message.reply_text(contact_text, parse_mode='HTML')

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---
async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ ‚úçÔ∏è":
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–∑—ã–≤. –ú—ã –æ—á–µ–Ω—å —Ü–µ–Ω–∏–º —Ç–≤–æ–µ –º–Ω–µ–Ω–∏–µ!",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–û—Ç–º–µ–Ω–∞ üîô")]], resize_keyboard=True)
        )
        return TYPING_FEEDBACK

    elif text == "–ü–æ–∂–µ–ª–∞–Ω–∏–µ/–ò–¥–µ—è üí°":
        await update.message.reply_text(
            "–†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –º—ã –º–æ–∂–µ–º —É–ª—É—á—à–∏—Ç—å? –ñ–¥—É —Ç–≤–æ—é –∏–¥–µ—é!",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–û—Ç–º–µ–Ω–∞ üîô")]], resize_keyboard=True)
        )
        return TYPING_SUGGESTION

    elif text == "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ñ–æ—Ç–æ üì∏":
        await update.message.reply_text(
            "–ü—Ä–∏—Å—ã–ª–∞–π —Å–≤–æ–µ —Ñ–æ—Ç–æ! –ú—ã —Å —Ä–∞–¥–æ—Å—Ç—å—é –æ–ø—É–±–ª–∏–∫—É–µ–º —Å–∞–º—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–æ—Ç–æ —É —Å–µ–±—è –≤ —Å—Ç–æ—Ä–∏—Å! üì∏"
        )

    elif text == "–ù–æ–≤–∏–Ω–∫–∏ üÜï":
        await show_news(update, context)

    elif text == "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å üìû":
        await show_contacts(update, context)

    return ConversationHandler.END

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –∏ –ø–æ–∂–µ–ª–∞–Ω–∏–π ---
async def received_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_feedback = update.message.text
    user = update.message.from_user

    try:
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=f"üìù <b>–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤</b> –æ—Ç @{user.username or user.first_name} (ID: {user.id}):\n\n{user_feedback}",
            parse_mode='HTML'
        )
        await update.message.reply_text("–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ–π –æ—Ç–∑—ã–≤! üíö", reply_markup=main_menu_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu_keyboard())
    
    return ConversationHandler.END

async def received_suggestion(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_suggestion = update.message.text
    user = update.message.from_user

    try:
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=f"üí° <b>–ù–æ–≤–æ–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ/–∏–¥–µ—è</b> –æ—Ç @{user.username or user.first_name} (ID: {user.id}):\n\n{user_suggestion}",
            parse_mode='HTML'
        )
        await update.message.reply_text("–°—É–ø–µ—Ä! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–¥–µ—é! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ—ë —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º. üî•", reply_markup=main_menu_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu_keyboard())
    
    return ConversationHandler.END

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    photo_file = await update.message.photo[-1].get_file()
    caption = update.message.caption or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"

    try:
        await context.bot.send_photo(
            chat_id=ADMIN_CHAT_ID,
            photo=photo_file.file_id,
            caption=f"üì∏ <b>–ù–æ–≤–æ–µ —Ñ–æ—Ç–æ</b> –æ—Ç @{user.username or user.first_name} (ID: {user.id}):\n{caption}",
            parse_mode='HTML'
        )
        await update.message.reply_text("–í–∞—É, –∫—Ä—É—Ç–æ–µ —Ñ–æ—Ç–æ! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–µ–ª–∏—à—å—Å—è —Å –Ω–∞–º–∏! ü§©", reply_markup=main_menu_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu_keyboard())

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —á–∞—Ç–∞
async def get_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    await update.message.reply_text(f"ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: <code>{chat_id}</code>", parse_mode='HTML')

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())
    return ConversationHandler.END

async def error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f'Update {update} caused error {context.error}')

def main():
    try:
        application = Application.builder().token(BOT_TOKEN).build()

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤ –∏ –ø–æ–∂–µ–ª–∞–Ω–∏–π
        conv_handler = ConversationHandler(
            entry_points=[
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_main_menu)
            ],
            states={
                TYPING_FEEDBACK: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, received_feedback)
                ],
                TYPING_SUGGESTION: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, received_suggestion)
                ],
            },
            fallbacks=[
                CommandHandler('cancel', cancel),
                CommandHandler('start', start),
                MessageHandler(filters.Regex('^–û—Ç–º–µ–Ω–∞ üîô$'), cancel)
            ],
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("chat_id", get_chat_id))
        application.add_handler(CommandHandler("cancel", cancel))
        application.add_handler(conv_handler)
        application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        application.run_polling()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main()
